# AUTOGENERATED! DO NOT EDIT! File to edit: ../30_models.ipynb.

# %% auto 0
__all__ = ['RandomModel']

# %% ../30_models.ipynb 4
from .datamodule import *
from .utils import *

# %% ../30_models.ipynb 5
import pandas as pd
import numpy as np
from datetime import timedelta
from fastcore.all import *

# %% ../30_models.ipynb 7
class RandomModel:
    def __init__(self,action_probs): store_attr()
        
    def __call__(self, df,hold_time=28):
        out = self.open_positions(df)
        out = self.close_positions(out,hold_time)
        
        
        f = bind(get_next_trading_day,unique_dates=L(*df.date),dates_dict=L(*df.date).val2idx())   
        out['open_date']  = pd.to_datetime(out.open_date.apply(f))
        out['close_date'] = pd.to_datetime(out.close_date.apply(f))
        return out
        
    def open_positions(self,df):
        out_cols = ['open_date','ticker','action']
        out = pd.DataFrame(columns=out_cols)
        in_df = df[['date','ticker']]
        in_df.columns = out_cols[:-1]

        for action,prob in action_probs.items():
            _tmp = in_df.sample(frac=prob)
            _tmp['action'] = action
            out = pd.concat([out,_tmp])
        out.sort_values('open_date',inplace=True)
        
        out['open_date'] = pd.to_datetime(out.open_date)
        return out  
    
    def close_positions(self,df,hold_time):
        df['close_date'] = df.open_date + timedelta(hold_time)
        return df
